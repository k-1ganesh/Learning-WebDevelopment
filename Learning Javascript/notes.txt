Everything happens in JS inside execution context.
Execution context has 2 phases : i) Memory Allocation ii) Code Execution. 
i) Memory Allocation : In this phase memory gets allocated to the variables and the functions. var : undefined  ,  function : fun(...) 
ii) Code Execution : In this code execution starts. 

for every function call function execution context gets created and pushed into the call stack. 

Hoisting : Using varible and functions before their declaration. For function and var variables it will work. For let and const it will give error. 

Scope in Javascript : variable is first searched in local scope of function . If not there then outer function . If not there then its outer function. 
                      This chain is called scope chain. 

Do the let and const gets Hoisted : Yes they gets hoisted but they can't be accesssed before initialization else reference error will be thrown. 

Temporal Dead Zone : It is a time period from let and const getting hoisted to the the initialization. 

Block Scope : {} This is a block .  let and const inside this block are the block scoped varibles.  They exist only inside this block. 

Closure : Closures are the functions which remembers the environment in which they are created.
          This means that an inner function can access the variables of its outer function, even after the outer function has returned.   

Asynchronous Javascript : By default JS is synchronous but it can be made asynchronous using (Browser API / Web API) .
What are Web API : These are the set of functions provided by browsers to help js make pages interactive. 
e.g ( setTimeout , setInterval , DOM API , fetch() , localStorage ) 

How JS execute Asynchronous Code ? 
=> Whenever Asynchronous code is there its callback gets registered in browser. Consider e.g of setTimeout and callback will execute after 1 second. So when the call back gets registered browser will start the timer. In mean time JS will be keep executing the normal code synchronously. When the timer expires that callback function gets placed in the CALLBACK QUEUE. EVENT LOOP will place the call back function in CALLSTACK when call stack is empty. 

Event Loop : It is a mechanism which is responsible for async JS. Its job is to place the call back functions from CALLBACK QUEUE or MICROTASK QUEUE to CALLSTACK. 

MicroTask Queue : It also has the callback functions of promises. It has more priority than the callback queue . 

Callback Function : A callback function in JavaScript is a function that is passed as an argument to another function, and is executed after the completion of some operation. The callback function is not executed immediately. Instead, it is "called back" by the higher-order function at a later time, typically after a specific task or event has occurred.

CallBack function uses : Callback function is very usefull for async javascript. Whenever we need to do somework async manner then we need to bundle those statement into the function and need to send that function as a callback.  Used In (event listners , async operation like reading data from servers). 

Issues with callback : 1. Callback hell  2. Inversion of control. 

1. Callback Hell : When multiple async operations needs to be executed in some order then it will result in nesting of callbacks. This grows the code horizontal manner which is diff to read and manage. This is callback hell.
2. Inversion of control : In callback we are sending complete function to other function . Now its job of that other function to call that function. So this way programmer loses the control of code. He needs to believe that his function will be called by function. 

Promises : Promises are the objects representing eventual completion of async operation. It has 2 part ( data -> returned by the async func , state->state of async funct i.e pending , rejected , fullfilled. ) 

promises solves the issue of callback hell and inversion of control. 
Insted of nested callback sequense .then() functions will be there which resolves the issue of call back hell. 
Programmers also has the control over his function and he is damn sure that his function will be executed when promise is resolved.

async-await : async-await is used to handle the promises. await keyword can used only inside the async function. async is a keyword used to add before function. 
async functions always return promise. 

How does async-await works :  We need to await to the function returning the promise. After that async function will no longer be in call stack. It will come back in call stack when the promise gets resolved. 
